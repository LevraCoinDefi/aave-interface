/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { StakeDataProvider, StakeDataProviderInterface } from './StakeDataProvider';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_umbrella',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
      {
        name: '_rewardsController',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
      {
        name: '_stataTokenFactory',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'getStakeData',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeData[]',
        components: [
          {
            name: 'stkToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stkTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'stkTokenTotalSupply',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'cooldownSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'unstakeWindowSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'asset',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'isStataToken',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'stataTokenUnderlying',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stataTokenAToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'rewards',
            type: 'tuple[]',
            internalType: 'struct Reward[]',
            components: [
              {
                name: 'rewardAddress',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'index',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'maxEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'distributionEnd',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'currentEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getUserStakeData',
    inputs: [
      {
        name: 'user',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeUserData[]',
        components: [
          {
            name: 'stakeToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stkTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'stakeTokenBalance',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeTokenRedeemableAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'underlyingTokenBalance',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'cooldownAmount',
            type: 'uint192',
            internalType: 'uint192',
          },
          {
            name: 'endOfCooldown',
            type: 'uint32',
            internalType: 'uint32',
          },
          {
            name: 'withdrawalWindow',
            type: 'uint32',
            internalType: 'uint32',
          },
          {
            name: 'rewards',
            type: 'address[]',
            internalType: 'address[]',
          },
          {
            name: 'rewardsAccrued',
            type: 'uint256[]',
            internalType: 'uint256[]',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'rewardsController',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'stataTokenFactory',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'umbrella',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
    ],
    stateMutability: 'view',
  },
] as const;

const _bytecode =
  '0x60e060405234801562000010575f80fd5b506040516200173638038062001736833981016040819052620000339162000069565b6001600160a01b0392831660805290821660a0521660c052620000ba565b6001600160a01b038116811462000066575f80fd5b50565b5f805f606084860312156200007c575f80fd5b8351620000898162000051565b60208501519093506200009c8162000051565b6040850151909250620000af8162000051565b809150509250925092565b60805160a05160c051611623620001135f395f8181605e015261024801525f818160a20152818161037b0152818161059c015281816106310152610bca01525f818160c901528181610125015261095501526116235ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80631494088f146100595780636bb65f531461009d57806384914262146100c4578063a16a09af146100eb578063e9ce34a514610100575b5f80fd5b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100807f000000000000000000000000000000000000000000000000000000000000000081565b6100f3610120565b6040516100949190610f9c565b61011361010e3660046110ab565b610950565b6040516100949190611132565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa15801561017e573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526101a59190810190611309565b90505f815167ffffffffffffffff8111156101c2576101c2611230565b60405190808252806020026020018201604052801561024257816020015b60408051610140810182525f8082526060602083018190529282018190528282018190526080820181905260a0820181905260c0820181905260e082018190526101008201526101208101919091528152602001906001900390816101e05790505b5090505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa1580156102a1573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526102c89190810190611309565b90505f5b8351811015610947575f8482815181106102e8576102e8611343565b602002602001015190505f8190505f826001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610333573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103579190611357565b60405163362a3fad60e01b81526001600160a01b0384811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063362a3fad906024015f60405180830381865afa1580156103bf573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526103e69190810190611309565b90505f815167ffffffffffffffff81111561040357610403611230565b60405190808252806020026020018201604052801561046a57816020015b6104576040518060a001604052805f6001600160a01b031681526020015f81526020015f81526020015f81526020015f81525090565b8152602001906001900390816104215790505b5090505f6104788489610e7e565b90505f80821561054757856001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104be573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104e29190611357565b9150856001600160a01b031663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610520573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105449190611357565b90505b5f5b855181101561070b575f86828151811061056557610565611343565b60209081029190910101516040516334fb3ea160e11b81526001600160a01b038b8116600483015280831660248301529192505f917f000000000000000000000000000000000000000000000000000000000000000016906369f67d4290604401608060405180830381865afa1580156105e1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106059190611372565b604051630450881160e51b81526001600160a01b038c8116600483015284811660248301529192505f917f00000000000000000000000000000000000000000000000000000000000000001690638a11022090604401602060405180830381865afa158015610676573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061069a91906113df565b90506040518060a00160405280846001600160a01b03168152602001836020015181526020018360400151815260200183606001518152602001828152508885815181106106ea576106ea611343565b60200260200101819052505050508080610703906113f6565b915050610549565b506040518061014001604052808d8b8151811061072a5761072a611343565b60200260200101516001600160a01b03168152602001896001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa15801561077b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526107a2919081019061141a565b8152602001896001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e3573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061080791906113df565b8152602001896001600160a01b031663218e4a156040518163ffffffff1660e01b8152600401602060405180830381865afa158015610848573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061086c91906113df565b8152602001896001600160a01b03166390b9f9e46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108ad573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108d191906113df565b8152602001876001600160a01b031681526020018415158152602001836001600160a01b03168152602001826001600160a01b03168152602001858152508b8a8151811061092157610921611343565b60200260200101819052505050505050505050808061093f906113f6565b9150506102cc565b50909392505050565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa1580156109ae573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526109d59190810190611309565b90505f815167ffffffffffffffff8111156109f2576109f2611230565b604051908082528060200260200182016040528015610a9057816020015b610a7d6040518061014001604052805f6001600160a01b03168152602001606081526020015f81526020015f81526020015f81526020015f6001600160c01b031681526020015f63ffffffff1681526020015f63ffffffff16815260200160608152602001606081525090565b815260200190600190039081610a105790505b5090505f5b8251811015610e76575f838281518110610ab157610ab1611343565b60209081029190910101516040516317c547a160e11b81526001600160a01b0388811660048301529192505f91831690632f8a8f4290602401606060405180830381865afa158015610b05573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b2991906114c1565b6040516370a0823160e01b81526001600160a01b03898116600483015291925083915f91908316906370a0823190602401602060405180830381865afa158015610b75573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b9991906113df565b60405160016204621960e51b031981526001600160a01b0384811660048301528b811660248301529192505f9182917f00000000000000000000000000000000000000000000000000000000000000009091169063ff73bce0906044015f60405180830381865afa158015610c10573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610c379190810190611538565b91509150604051806101400160405280856001600160a01b03168152602001876001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610c91573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610cb8919081019061141a565b8152602001848152602001876001600160a01b0316634cdad506866040518263ffffffff1660e01b8152600401610cf191815260200190565b602060405180830381865afa158015610d0c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d3091906113df565b8152602001876001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d71573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d959190611357565b6040516370a0823160e01b81526001600160a01b038f8116600483015291909116906370a0823190602401602060405180830381865afa158015610ddb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dff91906113df565b8152602001865f01516001600160c01b03168152602001866020015163ffffffff168152602001866040015163ffffffff16815260200183815260200182815250888881518110610e5257610e52611343565b60200260200101819052505050505050508080610e6e906113f6565b915050610a95565b509392505050565b5f805b8251811015610ed857828181518110610e9c57610e9c611343565b60200260200101516001600160a01b0316846001600160a01b031603610ec6576001915050610edd565b80610ed0816113f6565b915050610e81565b505f90505b92915050565b5f5b83811015610efd578181015183820152602001610ee5565b50505f910152565b5f8151808452610f1c816020860160208601610ee3565b601f01601f19169290920160200192915050565b5f8151808452602080850194508084015f5b83811015610f9157815180516001600160a01b03168852838101518489015260408082015190890152606080820151908901526080908101519088015260a09096019590820190600101610f42565b509495945050505050565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b8381101561108657888303603f19018552815180516001600160a01b0316845261014088820151818a870152610ff982870182610f05565b89840151878b0152606080850151908801526080808501519088015260a0808501516001600160a01b039081169189019190915260c08086015115159089015260e08086015182169089015261010080860151909116908801526101209384015187820394880194909452915061107290508183610f30565b968901969450505090860190600101610fc1565b509098975050505050505050565b6001600160a01b03811681146110a8575f80fd5b50565b5f602082840312156110bb575f80fd5b81356110c681611094565b9392505050565b5f8151808452602080850194508084015f5b83811015610f915781516001600160a01b0316875295820195908201906001016110df565b5f8151808452602080850194508084015f5b83811015610f9157815187529582019590820190600101611116565b5f6020808301818452808551808352604092508286019150828160051b8701018488015f5b8381101561108657888303603f19018552815180516001600160a01b0316845261014088820151818a87015261118f82870182610f05565b89840151878b0152606080850151908801526080808501519088015260a0808501516001600160c01b03169088015260c08085015163ffffffff9081169189019190915260e0808601519091169088015261010080850151888303828a015291935091506111fd83826110cd565b92505050610120808301519250858203818701525061121c8183611104565b968901969450505090860190600101611157565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561126d5761126d611230565b604052919050565b5f67ffffffffffffffff82111561128e5761128e611230565b5060051b60200190565b5f82601f8301126112a7575f80fd5b815160206112bc6112b783611275565b611244565b82815260059290921b840181019181810190868411156112da575f80fd5b8286015b848110156112fe5780516112f181611094565b83529183019183016112de565b509695505050505050565b5f60208284031215611319575f80fd5b815167ffffffffffffffff81111561132f575f80fd5b61133b84828501611298565b949350505050565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215611367575f80fd5b81516110c681611094565b5f60808284031215611382575f80fd5b6040516080810181811067ffffffffffffffff821117156113a5576113a5611230565b60405282516113b381611094565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b5f602082840312156113ef575f80fd5b5051919050565b5f6001820161141357634e487b7160e01b5f52601160045260245ffd5b5060010190565b5f6020828403121561142a575f80fd5b815167ffffffffffffffff80821115611441575f80fd5b818401915084601f830112611454575f80fd5b81518181111561146657611466611230565b611479601f8201601f1916602001611244565b915080825285602082850101111561148f575f80fd5b6114a0816020840160208601610ee3565b50949350505050565b805163ffffffff811681146114bc575f80fd5b919050565b5f606082840312156114d1575f80fd5b6040516060810181811067ffffffffffffffff821117156114f4576114f4611230565b60405282516001600160c01b038116811461150d575f80fd5b815261151b602084016114a9565b602082015261152c604084016114a9565b60408201529392505050565b5f8060408385031215611549575f80fd5b825167ffffffffffffffff80821115611560575f80fd5b61156c86838701611298565b9350602091508185015181811115611582575f80fd5b85019050601f81018613611594575f80fd5b80516115a26112b782611275565b81815260059190911b820183019083810190888311156115c0575f80fd5b928401925b828410156115de578351825292840192908401906115c5565b8095505050505050925092905056fea264697066735822122038b67c6525103dcc3ec4ab1639ba9d55a80185b02b504ee0d19d1b2d27630dd864736f6c63430008140033';

type StakeDataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakeDataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakeDataProvider__factory extends ContractFactory {
  constructor(...args: StakeDataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<StakeDataProvider> {
    return super.deploy(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    ) as Promise<StakeDataProvider>;
  }
  override getDeployTransaction(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {}
    );
  }
  override attach(address: string): StakeDataProvider {
    return super.attach(address) as StakeDataProvider;
  }
  override connect(signer: Signer): StakeDataProvider__factory {
    return super.connect(signer) as StakeDataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakeDataProviderInterface {
    return new utils.Interface(_abi) as StakeDataProviderInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): StakeDataProvider {
    return new Contract(address, _abi, signerOrProvider) as StakeDataProvider;
  }
}
